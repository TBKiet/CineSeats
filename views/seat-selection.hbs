<section id="seatSection">
    <div class="time-selector">
        <div class="time-container">
            <span class="selector-label">Đổi suất chiếu</span>
            <div class="time-options">
                {{#each relevantShowtime}}
                <button class="time-button {{#if (eq showtimeId ../showtimeId)}} active{{/if}}"
                    data-showtime-id="{{this.showtimeId}}"
                    data-room-name="{{this.theaterRoom.roomName}}">{{this.startTime}}
                </button>
                {{/each}}
            </div>
        </div>
    </div>
    <div class="screen-container">
        <div class="screen">
            <div class="screen-text">Screen</div>
        </div>
    </div>

    <div class="theater-container">
        <div class="seating-container">
            {{#each rows}}
            <div class="seat-row">
                <div class="seat-row-label">{{rowLetter}}</div>
                {{#each seats}}
                <div class="seat {{status}} {{#if (eq seatVisibility 0)}} invisible{{/if}}" {{#if seatVisibility}}
                    id="{{assignSeatId @index}}" {{/if}} data-seatId="{{seatID}}" data-seat-price="{{price}}">
                    {{rowLetter}}{{padZero seatNumber}}
                </div>
                {{/each}}
            </div>
            {{/each}}
        </div>
    </div>

    <div class="legend-container">
        <div class="legend-item">
            <div class="seat available"></div>
            <span class="legend-text">Ghế thường</span>
        </div>
        <div class="legend-item">
            <div class="seat vip"></div>
            <span class="legend-text">Ghế VIP</span>
        </div>
        <div class="legend-item">
            <div class="seat unavailable"></div>
            <span class="legend-text">Ghế đã bán</span>
        </div>
        <div class="legend-item">
            <div class="seat selected"></div>
            <span class="legend-text">Ghế đang chọn</span>
        </div>
    </div>
    <div id="rectangle"></div>
</section>

<!-- Hidden Payment Section: show after user clicks "Đặt vé" -->
<section id="paymentSection" style="display: none;">
    <div class="payment-container">
        <div class="ticket-preview">
            <div class="ticket">
                <div class="left">
                    <div class="image" style=" background: url({{image}}); background-size: cover;">
                        <div class="ticket-number"></div>
                    </div>
                    <div class="ticket-info">
                        <p class="date">
                            <span>{{dayOfWeek}}</span>
                            <span class="june-29">{{formattedDate}}</span>
                            <span>{{year}}</span>
                        </p>
                        <div class="show-name">
                            <h1>{{name_vn}}</h1>
                            {{!-- <h2>Tập đặc biệt 2</h2> --}}
                        </div>
                        <div class="time">
                            <p>Số Vé: <span id="seatCount">0</span></p>
                            <p>Tổng tiền: <span id="payment-total-price-display">0 đ</span></p>
                            <p id="room">{{roomName}} <span>|</span> {{showtimeTime}}</p>
                        </div>
                        <p class="location">
                            <span>{{theaterName}}</span>
                            <span class="separator">
                                <i class="fa-solid fa-film"></i>
                            </span>
                            <span>{{city}}</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="left-section">
            <div class="promo-section">
                <h3>Khuyến mãi</h3>
                <div class="promo-input">
                    <input type="text" placeholder="Mã khuyến mãi">
                    <button class="apply-btn">Áp dụng</button>
                </div>
            </div>
            <div class="payment-methods">
                <h3>Phương thức thanh toán</h3>
                <div class="payment-options">
                    <label class="payment-option">
                        <input type="radio" name="payment" value="MoMo">
                        <img src="/images/momo-logo.png" alt="MoMo">
                        <span>Ví Điện Tử MoMo</span>
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="payment" value="VNPAY">
                        <img src="/images/vnpay-logo.png" alt="VNPAY">
                        <span>VNPAY</span>
                    </label>
                </div>
            </div>
        </div>
        <div class="action-buttons">
            <button class="back-btn">
                <i class="fas fa-arrow-left mr-2"></i> Quay lại
            </button>
            <button class="payment-btn">
                Thanh toán <i class="fas fa-arrow-right ml-2"></i>
            </button>
        </div>
    </div>
</section>
<div class="bottom-rectangle">
    <div class="movie-infos">
        <h3 class="movie-title">{{name_vn}}</h3>
        <div class="show-details">
            <span class="theater-name">{{theaterName}}</span>
            <span class="separator">•</span>
            <span class="showtime">{{showtimeDate}}, {{showtimeTime}}</span>
        </div>
    </div>
    <div class="timer-booking-container">
        <div class="booking-info">
            <div class="total-price">
                <span>Tổng tiền: </span>
                <span id="total-price-display">0 đ</span>
            </div>
            <button class="book-button">Đặt vé</button>
        </div>
        <div class="timer-container">
            <span class="timer-label">Thời gian giữ vé:</span>
            <span class="countdown">5:00</span>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- Showtime ID ---
        let showtimeId = '{{showtimeId}}';
        // --- Showtime Button Selection ---
        const timeButtons = document.querySelectorAll('.time-button');

        timeButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Remove 'active' class from all buttons
                timeButtons.forEach(btn => btn.classList.remove('active'));
                // Add 'active' class to the clicked button
                button.classList.add('active');

                // Update showtime information
                const newTime = button.textContent.trim();
                const selectedShowtimeId = button.getAttribute('data-showtime-id');
                const roomName = button.getAttribute('data-room-name');

                // Fetch seat data and render seat selection
                fetch('/booking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ showtimeId: selectedShowtimeId })
                }).then(response => response.json())
                    .then(data => {
                        renderSeatSelection(data);
                        showtimeId = selectedShowtimeId;
                        document.querySelector('#room').textContent = `${roomName} | ${newTime}`;
                        document.querySelector('.showtime').textContent = `${"{{showtimeDate}}"}, ${newTime}`;
                        drawRectangle();
                    })
                    .catch(err => console.error("Error:", err));
            });
        });

        // --- Seat Selection Rendering ---
        function renderSeatSelection(data) {
            resetSeats();

            const theaterContainer = document.querySelector('.theater-container');
            const seatingContainer = document.createElement('div');
            seatingContainer.classList.add('seating-container');

            let indexCount = 0;
            data.rows.forEach(row => {
                const seatRow = document.createElement('div');
                seatRow.classList.add('seat-row');

                // Row label
                const rowLabel = document.createElement('div');
                rowLabel.classList.add('seat-row-label');
                rowLabel.textContent = row.rowLetter;
                seatRow.appendChild(rowLabel);

                // Seats
                row.seats.forEach(seat => {
                    const seatDiv = document.createElement('div');
                    seatDiv.classList.add('seat', seat.status);
                    seatDiv.setAttribute('data-seatId', seat.seatID);
                    if (seat.seatVisibility === 0) {
                        seatDiv.classList.add('invisible');
                    } else if (seat.seatVisibility) {
                        seatDiv.id = indexCount === 0 ? 'seat-top-left' : 'seat-bottom-right';
                        indexCount = 1;
                    }

                    seatDiv.dataset.seatId = seat.seatID;
                    seatDiv.textContent = seat.seatNumber < 10
                        ? `${seat.rowLetter}0${seat.seatNumber}`
                        : `${seat.rowLetter}${seat.seatNumber}`;
                    seatRow.appendChild(seatDiv);
                });

                seatingContainer.appendChild(seatRow);
            });

            theaterContainer.innerHTML = '';
            theaterContainer.appendChild(seatingContainer);
        }

        // --- Seat Selection Logic ---
        const selectedSeats = [];
        const seatPrice = 50;
        const formatter = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            minimumFractionDigits: 0
        });

        function toggleSeatSelection(seat) {
            seat.classList.toggle('selected');
        }

        function getSeatData(seat) {
            return {
                seatID: seat.getAttribute('data-seatId'),
                rowLetter: seat.textContent.trim().charAt(0),
                seatNumber: parseInt(seat.textContent.trim().slice(1), 10),
                price: seat.getAttribute('data-seat-price')
            };
        }

        document.querySelector('.theater-container').addEventListener('click', event => {
            const seat = event.target.closest('.seat.available:not(.invisible)');
            if (!seat) return;

            // 1. Get seat data
            const { seatID } = getSeatData(seat);
            const seatIndex = selectedSeats.findIndex(s => s.seatID === seatID);

            // 2. If seat not selected yet, add
            if (seatIndex === -1) {
                seat.classList.add('selected');
                selectedSeats.push(getSeatData(seat));
            }
            // 3. Otherwise remove it
            else {
                seat.classList.remove('selected');
                selectedSeats.splice(seatIndex, 1);
            }

            updateBookingInfo();
        });

        function resetSeats() {
            selectedSeats.length = 0;
            updateBookingInfo();
        }

        function updateBookingInfo() {
            console.log(selectedSeats);
            const totalPrice = selectedSeats.reduce((sum, seat) => sum + Number(seat.price), 0)*1000;
            const formattedPrice = formatter.format(totalPrice);

            document.getElementById('total-price-display').textContent = formattedPrice;
            document.getElementById('payment-total-price-display').textContent = formattedPrice;
        }

        // --- Payment Logic ---
        const paymentBtn = document.querySelector('.payment-btn');
        paymentBtn.addEventListener('click', function (e) {
            e.preventDefault();

            const selectedPaymentOption = document.querySelector('input[name="payment"]:checked').value;
            if (selectedPaymentOption === 'VNPAY') {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/payment/create_payment_url';

                // Add necessary hidden inputs
                const amount = document.getElementById('payment-total-price-display').innerText.replace(/\D/g, '');
                form.appendChild(createHiddenInput('totalAmount', amount));
                form.appendChild(createHiddenInput('paymentMethod', selectedPaymentOption));

                const seatsData = JSON.stringify(selectedSeats.map(seat => ({
                    seatId: seat.seatID,
                    seatPrice: seat.price
                })));
                form.appendChild(createHiddenInput('seatsData', seatsData));
                

                form.appendChild(createHiddenInput('showtimeId', '{{showtimeId}}'));

                document.body.appendChild(form);
                form.submit();
            } else {
                alert('Chức năng thanh toán cho phương thức này chưa được triển khai.');
            }
        });

        function createHiddenInput(name, value) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            return input;
        }

        // --- Navigation Logic ---
        const bookButton = document.querySelector('.book-button');
        const backButton = document.querySelector('.back-btn');
        const seatSection = document.getElementById('seatSection');
        const paymentSection = document.getElementById('paymentSection');
        const seatCount = document.getElementById('seatCount');

        bookButton.addEventListener('click', async () => {
            if (selectedSeats.length === 0) {
                alert('Vui lòng chọn ghế trước khi đặt vé');
                return;
            }
            try {
                // Prepare the API calls
                const selectedSeatIds = selectedSeats.map(seat => seat.seatID);
                console.log(selectedSeatIds);
                const validateSeatsPromise = fetch('/api/booking/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ showtimeId, seatIds: selectedSeatIds })
                }).then(response => response.json());

                const reserveSeatsPromise = fetch('/api/reserved', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ showtimeId, seatIds: selectedSeatIds })
                }).then(response => response.json());

                // Execute both API calls concurrently
                const [validateResult, reserveResult] = await Promise.all([validateSeatsPromise, reserveSeatsPromise]);

                // Check the results
                if (validateResult.success && reserveResult.success) {
                    seatCount.textContent = selectedSeats.length;
                    seatSection.style.display = 'none';
                    paymentSection.style.display = 'block';
                } else {
                    let errorMessage = 'Failed to reserve seats.';
                    console.log(validateResult.success);
                    if (!validateResult.success || !reserveResult.success) {
                        errorMessage = 'One or more selected seats are already booked.';
                    }
                    alert(errorMessage);
                }
            } catch (error) {
                console.error('Error during seat reservation:', error);
                alert('An unexpected error occurred. Please try again later.');
            }
        });

        backButton.addEventListener('click', () => {
            if (confirm('Vé của bạn sẽ bị hủy nếu bạn quay lại trang trước. Bạn có chắc chắn muốn quay lại?')) {
                fetch('/api/reserved/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ showtimeId, seatIds: selectedSeats.map(seat => seat.seatID) })
                }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            paymentSection.style.display = 'none';
                            seatSection.style.display = 'block';
                            drawRectangle();
                        } else {
                            alert('Failed to cancel seat reservation.');
                        }
                    })
                    .catch(err => {
                        console.error('Error during seat cancellation:', err);
                        alert('An unexpected error occurred. Please try again later.');
                    });
            }
        });

        // --- Rectangle Highlight Logic ---
        function drawRectangle() {
            const topLeft = document.getElementById('seat-top-left');
            const bottomRight = document.getElementById('seat-bottom-right');
            if (topLeft && bottomRight) {
                const expandBy = 10;
                const rectangle = document.getElementById('rectangle');
                const topLeftRect = topLeft.getBoundingClientRect();
                const bottomRightRect = bottomRight.getBoundingClientRect();

                rectangle.style.left = `${topLeftRect.left + window.scrollX - expandBy / 2}px`;
                rectangle.style.top = `${topLeftRect.top + window.scrollY - expandBy / 2}px`;
                rectangle.style.width = `${bottomRightRect.right - topLeftRect.left + expandBy / 2 + 4}px`;
                rectangle.style.height = `${bottomRightRect.bottom - topLeftRect.top + expandBy / 2 + 4}px`;
                rectangle.style.position = 'absolute';
                rectangle.style.pointerEvents = 'none';
            }
        }
        drawRectangle();
        const debouncedDraw = debounce(drawRectangle, 10);
        document.querySelector('.theater-container').addEventListener('scroll', debouncedDraw);
        window.addEventListener('resize', debouncedDraw);

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }
    });
</script>