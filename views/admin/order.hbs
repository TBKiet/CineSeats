<section class="d-flex">
    {{> sidebar }}
    <div class="flex flex-md-row p-0">
        <!-- Booking History Section -->
        <section class="p-4 bg-white rounded shadow" style="max-width: 1000px; margin: 0 auto;">
            <h1 class="mb-4 fw-bold">Booking History</h1>
            <div class="mb-3">
                <input type="text" id="filter-input" placeholder="Filter by username" class="form-control" style="max-width: 300px; display: inline-block;">
                <select id="payment-status-filter" class="form-control" style="max-width: 200px; display: inline-block;">
                    <option value="">All</option>
                    <option value="Paid">Paid</option>
                    <option value="Pending">Pending</option>
                    <option value="Failed">Failed</option>
                </select>
                <button id="filter-button" class="btn btn-primary">Filter</button>
            </div>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Booking ID</th>
                    <th>Username</th>
                    <th>Total Amount</th>
                    <th>Payment Method</th>
                    <th>Payment Status</th>
                    <th>Booking Date</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="booking-history-body">
                <!-- Booking history will be populated here -->
                </tbody>
            </table>
        </section>
    </div>
</section>

<!-- Modal for Booking Details -->
<div id="booking-details-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Booking Details</h2>
        <div id="booking-details-content">
            <!-- Booking details will be populated here -->
        </div>
    </div>
</div>

<!-- Modal for Editing Booking -->
<div id="edit-booking-modal" class="modal">
    <div class="modal-content">
        <span class="close-edit">&times;</span>
        <h2>Edit Booking</h2>
        <form id="edit-booking-form">
            <div class="form-group">
                <label for="edit-username">Username:</label>
                <input type="text" id="edit-username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="edit-total-amount">Total Amount:</label>
                <input type="number" id="edit-total-amount" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="edit-payment-method">Payment Method:</label>
                <input type="text" id="edit-payment-method" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="edit-payment-status">Payment Status:</label>
                <select id="edit-payment-status" class="form-control" required>
                    <option value="Paid">Paid</option>
                    <option value="Pending">Pending</option>
                    <option value="Failed">Failed</option>
                </select>
            </div>
            <div class="form-group">
                <label for="edit-booking-date">Booking Date:</label>
                <input type="datetime-local" id="edit-booking-date" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </form>
    </div>
</div>

<style>
    .table {
        border-collapse: collapse;
        width: 100%;
    }

    .table th, .table td {
        text-align: left;
        padding: 8px;
    }

    .table th {
        background-color: #f4f4f4;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .table-striped tbody tr:hover {
        background-color: #e0e0e0;
        cursor: pointer;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close, .close-edit {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover, .close:focus, .close-edit:hover, .close-edit:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>

<script>
    function convertToStandardTime(isoString) {
        const date = new Date(isoString);
        const options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
            timeZone: 'UTC'
        };
        return date.toLocaleString('en-US', options).replace(',', '');
    }

    document.addEventListener("DOMContentLoaded", async () => {
        const bookingHistoryBody = document.getElementById("booking-history-body");

        async function fetchBookingHistory(filter = '', paymentStatus = '') {
            try {
                const response = await fetch(`/admin/booking?filter=${filter}&paymentStatus=${paymentStatus}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (!response.ok)
                    alert('Failed to fetch booking history');

                const data = await response.json();
                bookingHistoryBody.innerHTML = data.map(booking => `
                <tr class="booking-row" data-booking-id="${booking.bookingID}">
                    <td>${booking.bookingID}</td>
                    <td>${booking.username}</td>
                    <td>${booking.totalAmount}</td>
                    <td>${booking.paymentMethod}</td>
                    <td>${booking.paymentStatus}</td>
                    <td>${convertToStandardTime(booking.bookingDateTime)}</td>
                    <td>
                        <button class="edit-btn btn btn-success btn-sm" data-id="${booking.bookingID}">Edit</button>
                    </td>
                </tr>
            `).join('');

                // Add click event listener to each row
                document.querySelectorAll('.booking-row').forEach(row => {
                    row.addEventListener('click', async (event) => {
                        const bookingId = event.currentTarget.getAttribute('data-booking-id');
                        await showBookingDetails(bookingId);
                    });
                });

                // Add click event listener to each edit button
                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', async (event) => {
                        event.stopPropagation();
                        const bookingId = event.currentTarget.getAttribute('data-id');
                        await showEditForm(bookingId);
                    });
                });
            } catch (error) {
                bookingHistoryBody.innerHTML = `<tr><td colspan="7" class="text-danger">${error.message}</td></tr>`;
            }
        }

        document.getElementById('filter-button').addEventListener('click', () => {
            const filterInput = document.getElementById('filter-input').value.trim();
            const paymentStatus = document.getElementById('payment-status-filter').value;
            fetchBookingHistory(filterInput, paymentStatus);
        });

        await fetchBookingHistory();
    });

    async function showBookingDetails(bookingId) {
        const modal = document.getElementById("booking-details-modal");
        const modalContent = document.getElementById("booking-details-content");

        try {
            const response = await fetch(`/account/booking/${bookingId}/details`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok)
                throw new Error('Failed to fetch booking details');

            const details = await response.json();
            modalContent.innerHTML = `
                <p><strong>Title:</strong> ${details.title}</p>
                <p><strong>Seats:</strong> ${details.seats.map(seat => `${seat.rowLetter}${seat.seatNumber}`).join(', ')}</p>
                <p><strong>Start Time:</strong> ${details.startTime}</p>
                <p><strong>Theater Name:</strong> ${details.theaterName}</p>
                <p><strong>Room Name:</strong> ${details.roomName}</p>
            `;

            modal.style.display = "block";
        } catch (error) {
            modalContent.innerHTML = `<p class="text-danger">${error.message}</p>`;
            modal.style.display = "block";
        }

        // Close the modal
        document.querySelector('.close').onclick = () => {
            modal.style.display = "none";
        };

        window.onclick = (event) => {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };
    }

    async function showEditForm(bookingId) {
        const modal = document.getElementById("edit-booking-modal");
        const form = document.getElementById("edit-booking-form");

        try {
            const response = await fetch(`/admin/booking/${bookingId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok)
                throw new Error('Failed to fetch booking details');

            const booking = await response.json();
            document.getElementById("edit-username").value = booking.username;
            document.getElementById("edit-total-amount").value = booking.totalAmount;
            document.getElementById("edit-payment-method").value = booking.paymentMethod;
            document.getElementById("edit-payment-status").value = booking.paymentStatus;
            document.getElementById("edit-booking-date").value = new Date(booking.bookingDateTime).toISOString().slice(0, 16);

            form.onsubmit = async (event) => {
                event.preventDefault();

                const updatedBooking = {
                    username: document.getElementById("edit-username").value,
                    totalAmount: document.getElementById("edit-total-amount").value,
                    paymentMethod: document.getElementById("edit-payment-method").value,
                    paymentStatus: document.getElementById("edit-payment-status").value,
                    bookingDateTime: new Date(document.getElementById("edit-booking-date").value).toISOString(),
                };

                const updateResponse = await fetch(`/admin/booking/${bookingId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedBooking),
                });

                if (updateResponse.ok) {
                    alert('Booking updated successfully!');
                    modal.style.display = "none";
                    await fetchBookingHistory();
                } else {
                    alert('Error updating booking.');
                }
            };

            modal.style.display = "block";
        } catch (error) {
            alert(error.message);
        }

        // Close the modal
        document.querySelector('.close-edit').onclick = () => {
            modal.style.display = "none";
        };

        window.onclick = (event) => {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };
    }
</script>